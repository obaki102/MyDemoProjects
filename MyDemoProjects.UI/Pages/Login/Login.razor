@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IAuthentication Authentication
@inject IJSRuntime JS
<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1 mx-auto">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-6 align-content-center">
                        <MudForm Model="@_user" @ref="form" Validation="@(_loginValidator.ValidateValue)">

                            <MudTextField @bind-Value="_user.Email" T="string" For="@(() => _user.Email)"
                                          Label="Email"
                                          OnlyValidateIfDirty="true"> </MudTextField>
                            <MudTextField @bind-Value="_user.Password" T="string" Label="Password" For="@(() => _user.Password)"
                                          InputType="InputType.Password"
                                          OnlyValidateIfDirty="true"> </MudTextField>
                        </MudForm>
                    </MudPaper>
                    <MudPaper Class="pa-4">
                        <MudButton Variant="Variant.Filled" OnClick="@Register">  <MudIcon Icon="@Icons.Filled.AppRegistration" Title="Create account" /></MudButton>
                        <MudButton Class="flex-grow-1" OnClick="@(()=>SignInExternal("Google"))" Variant="Variant.Filled" StartIcon="@Icons.Custom.Brands.Google" ButtonType="ButtonType.Button"
                                   title="Sign in with Google">
                            Google
                        </MudButton>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@LoginUser">Login</MudButton>
    </DialogActions>
</MudDialog>


@code {

    MudForm form;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private LoginUser _user = new LoginUser();
    private LoginUserValidator _loginValidator = new LoginUserValidator();

    public async Task LoginUser()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var isUserAuthenticated = await Authentication.LoginAsync(_user);

            if (!isUserAuthenticated.IsSuccess)
            {
                foreach (var error in isUserAuthenticated.Messages)
                    Snackbar.Add(error, Severity.Error);
            }
            else
            {
                MudDialog.Close();
                NavigationManager.NavigateTo("/");
            }
        }
    }

    public void Register()
    {
        MudDialog.Close();
        DialogService.Show<Register>("Register", new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = true });
    }

    private async Task SignInExternal(string provider)
    {
        await JS.InvokeVoidAsync("externalLogin", provider, DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task ConfirmExternal(string provider, string email, string name, string pictureUrl, string accesstoken)
    {
        try
        {
            var externalUser = new LoginExternalUser
                {
                    AccessToken = accesstoken,
                    EmailAddress = email,
                    Provider = provider,
                    UserName = name,
                    PictureUrl = pictureUrl
                };

            var isExternlaUserAuthenticated = await Authentication.ExternalLoginAsync(externalUser);
            if (isExternlaUserAuthenticated.IsSuccess is false)
            {
                Snackbar.Add("Please check your username and password. If you are still unable to log in, contact your administrator.", MudBlazor.Severity.Error);
            }
            else
            {
                MudDialog.Close();
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, MudBlazor.Severity.Error);
        }
    }

    [JSInvokable]
    public Task<GoogleAuth2Config> GetGoogleExternalAuthConfig() => Authentication.GetGoogleExternalAuthConfig();



}