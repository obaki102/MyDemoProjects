@    using System.Text.RegularExpressions
@    using System.ComponentModel.DataAnnotations
@    using MyDemoProjects.Application.Shared.DTO
@inject IAuthentication Authentication

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1 mx-auto">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <MudForm @ref="form"  Model="@newUser">
                            <MudTextField @bind-Value="newUser.Email" T="string" Label="Email" Required="true" RequiredError="Email is required!"
                                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" OnlyValidateIfDirty="true" />
                            <MudTextField @bind-Value="newUser.UserName" T="string" Label="User Name" Required="true" RequiredError="User Name is required!" OnlyValidateIfDirty="true" />
                            <MudTextField @bind-Value="newUser.FirstName" T="string" Label="First Name" Required="true" RequiredError="First Name is required!" OnlyValidateIfDirty="true" />
                            <MudTextField @bind-Value="newUser.LastName" T="string" Label="Last Name" Required="true" RequiredError="Last Name is required!" OnlyValidateIfDirty="true" />
                            <MudTextField @bind-Value="newUser.Password" T="string" Label="Password" @ref="pwField1"
                                          InputType="InputType.Password"
                                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                          RequiredError="Password is required!" OnlyValidateIfDirty="true" />
                            <MudTextField T="string"
                                          Label="Confirm Password" InputType="InputType.Password"
                                          Validation="@(new Func<string, string>(PasswordMatch))" OnlyValidateIfDirty="true" />
                        </MudForm>
                    </MudPaper>
                    <MudPaper>
                        @*     TODO: Find way to make this cleaner*@
                        @if (isError)
                        {
                            <MudText Color="@Color.Error"><MudIcon Icon="@Icons.Filled.Error" Color="Color.Error" /> @errorMessage</MudText>
                        }

                        @if (isSuccess)
                        {
                            <MudText Color="@Color.Success"><MudIcon Icon="@Icons.Filled.CheckCircle" Color="Color.Success" /> Account susccesfully created</MudText>
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@CreateAccount" Class="ml-auto">Create Account</MudButton>
    </DialogActions>
</MudDialog>

@code {
    bool isSuccess = false;
    bool isError = false;
    MudTextField<string> pwField1;
    private string errorMessage = string.Empty;
    MudForm form;
    CreateAccountRequest newUser = new CreateAccountRequest();
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task CreateAccount()
    {
        form.Validate();

        if (form.IsValid)
        {
            var result = await Authentication.CreateAccountAsync(newUser);

            if (!result.IsSuccess)
            {
                errorMessage = result.Messages.FirstOrDefault();
                isError = true;
                isSuccess = false;
            }
            else
            {
                isSuccess = true;
                isError = false;
            }
        }
    }

}