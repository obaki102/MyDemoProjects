@page "/chatroom"
@using System.Collections.Concurrent
@using MyDemoProjects.Application.Shared.Events
@inject NavigationManager NavigationManager
@inject CustomAuthStateProvider CustomAuthStateProvider
@inject IOnlineUsers OnlineUsersService
@implements IDisposable
<AuthorizeView>
    <Authorized>
        <MudGrid>
            <MudItem xs="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            @if (string.IsNullOrEmpty(userSettings.ProfileUrl))
                            {
                                <MudAvatar Color="Color.Secondary">@userSettings.Initials</MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Image="@userSettings.ProfileUrl" Style="height:50px; width:50px;"> </MudAvatar>
                            }
                        </CardHeaderAvatar>
                        <CardHeaderContent>

                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>

                    @foreach (var message in _messages)
                    {
                        @if (string.IsNullOrEmpty(message.User.ProfileUrl))
                        {
                            <MudAvatar Color="Color.Secondary">@message.User.Initials</MudAvatar>
                        }
                        else
                        {
                            <MudAvatar Image="@message.User.ProfileUrl" Style="height:50px; width:50px;"> </MudAvatar>
                        }
                        <MudText Typo="Typo.body1">@message.Message</MudText>
                    }
                    <MudCardContent>
                        <MudTextField T="string" Label="Chatbox" Variant="Variant.Outlined" Lines="3" @bind-Value="_enteredMessage" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Default" OnClick="@SendMessage"> Enter</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="6">
                <MudContainer>
                    <MudPaper Height="400px" Width="100%" Square="true" Class="mud-theme-primary">
                        @foreach (var user in onlineActivity)
                        {
                            <MudText Typo="Typo.body1">@user</MudText>
                        }
                    </MudPaper>
                </MudContainer>
            </MudItem>

            <MudItem xs="12">
                <MudContainer>
                    <MudPaper Height="400px" Width="100%" Square="true" Class="mud-theme-primary">
                        @foreach (var user in onlineUsers)
                        {
                            <MudText Typo="Typo.body1">@user</MudText>
                        }
                    </MudPaper>
                </MudContainer>
            </MudItem>
        </MudGrid>
    </Authorized>
</AuthorizeView>

@code {

    private HubConnection _hubConnection { get; set; } = default;
    private List<ChatMessage> _messages = new List<ChatMessage>();
    //TODO casecade it as a parameter
    private User userSettings = new User();
    private List<string> onlineActivity = new List<string>();
    private List<string> onlineUsers = new List<string>();
    private string _enteredMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        userSettings = CustomAuthStateProvider.UserSettings;
        OnlineUsersService.OnChange += HandleCircuitsChanged;
        //Establish hub connection
        _hubConnection = _hubConnection.TryInitialize(NavigationManager, CustomAuthStateProvider);

        // await _hubConnection.SendAsync("OnlineUsers", CustomAuthStateProvider.UserSettings);
        //TODO : Strongly type client?
        _hubConnection.On<string, ChatMessage>("ReceiveMessage", async (from, chatMessage) =>
        {
            _messages.Add(chatMessage);
            StateHasChanged();
        });

        _hubConnection.On<string>("UserOnline", async (user) =>
        {

            onlineActivity.Add($"{user} has entered the chat");
            StateHasChanged();
        });

        _hubConnection.On<string>("UserOffline", async (user) =>
       {

           onlineActivity.Add($"{user} has left the chat");
           StateHasChanged();
       });

        //Leasons learned kick start your hub connecion before your handler definition.
        if (_hubConnection.State == HubConnectionState.Disconnected)
        {
            await _hubConnection.StartAsync();
        }
    }

    private void HandleCircuitsChanged()
    {
        InvokeAsync(() =>
        {
            foreach (var user in OnlineUsersService.UsersByNameIdentifier)
            {
                onlineUsers.Add(user.Value.Email);
            }
            StateHasChanged();
        });
    }

    private async Task SendMessage()
    {
        var chatMessage = new ChatMessage
            {
                User = userSettings,
                Message = _enteredMessage
            };
        await _hubConnection.SendAsync("ReceiveMessage", userSettings.Email, chatMessage);
    }

    public void Dispose()
    {
        OnlineUsersService.OnChange -= HandleCircuitsChanged;
        _ = _hubConnection.DisposeAsync();
    }
}
