@page "/chatroom"
@inject IRetrieveAuthState RetrieveAuthState
@inject NavigationManager NavigationManager
@inject CustomAuthStateProvider CustomAuthStateProvider
@implements IDisposable
<h3>ChatRoom</h3>
<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            @if (string.IsNullOrEmpty(_picUrl))
            {
                <MudAvatar Color="Color.Secondary">@_firstName[0]</MudAvatar>
            }
            else
            {
                <MudAvatar Image="@_picUrl" Style="height:50px; width:50px;"> </MudAvatar>
            }
        </CardHeaderAvatar>
        <CardHeaderContent>

        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>

    @foreach (var message in _messages)
    {
        <MudText Typo="Typo.body1">@message</MudText>
    }
    <MudCardContent>
        <MudTextField T="string" Label="Chatbox" Variant="Variant.Outlined" Lines="3" @bind-Value="_enteredMessage" />
    </MudCardContent>
    <MudCardActions>
        <MudButton  Color="Color.Default" OnClick="@SendMessage"> Enter</MudButton>
    </MudCardActions>
</MudCard>
@code {

    private Dictionary<string, string> claims = new Dictionary<string, string>();
    private HubConnection _hubConnection { get; set; } = default;
    private string _picUrl = string.Empty;
    private string _currentUser = string.Empty;
    private string _enteredMessage = string.Empty;
    private string _firstName = "Temp";
    private List<string> _messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        claims = await RetrieveAuthState.GetClaimValues();
        if (claims.ContainsKey(ApplicationClaimTypes.ProfilePictureDataUrl))
        {
            _picUrl = claims[ApplicationClaimTypes.ProfilePictureDataUrl];
        }

        if (claims.ContainsKey(ClaimTypes.NameIdentifier))
        {
            _currentUser = claims[ClaimTypes.NameIdentifier];
        }

        //Establish hub connection
        _hubConnection = _hubConnection.TryInitialize(NavigationManager, CustomAuthStateProvider);
        if (_hubConnection.State == HubConnectionState.Disconnected)
        {
            await _hubConnection.StartAsync();
        }

        //TODO : Strongly type client?
        _hubConnection.On<string, string, string>("ReceiveMessage", async (from, to, message) =>
        {
            _messages.Add($"Message received from {from} :{message}");
            StateHasChanged();
        });

    }

    private async Task SendMessage()
    {
        await _hubConnection.SendAsync("ReceiveMessage", _currentUser, _currentUser.Equals("102407d8-3d3f-46c9-8654-122f325b090a") ? "fc7df3c0-9266-4146-9c4c-d513dafd3f2f" : _currentUser, _enteredMessage);
    }

    public void Dispose()
    {
        _ =_hubConnection.DisposeAsync();
    }
}
