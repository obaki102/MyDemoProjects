@page "/chatroom"
@inject NavigationManager NavigationManager
@inject CustomAuthStateProvider CustomAuthStateProvider
@inject IJSRuntime JsRuntime
@implements IDisposable
<AuthorizeView>
    <Authorized>
        <div id="scrollableDiv" style="height:800px;overflow: auto;">
            <div Class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
                @foreach (var message in _messages)
                {
                      <div class="d-flex @((IsMyMessage(message.User.Email)? "justify-end" : "justify-start")) flex-row flex-grow-1 gap-4">
                            @if (string.IsNullOrEmpty(message.User.ProfileUrl))
                            {
                                <MudAvatar Color="Color.Secondary">@message.User.Initials</MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Image="@message.User.ProfileUrl" Style="height:50px; width:50px;"> </MudAvatar>
                            }
                            <MudPaper Class="pa-4 mr-16 overflow-auto">
                            <div class="d-flex flex-row">
                                <MudChip Size="Size.Small" Color="Color.Dark">@message.User.Email</MudChip>
                                <MudChip Size="Size.Small">@message.MessageCreateDate</MudChip>
                            </div>
                            <MudText Typo="Typo.body1">@message.Message</MudText>
                        </MudPaper>
                    </div>
                }
            </div>
        </div>
        <br />
        <div Class="d-flex  flex-row px-2 mx-4">
            <MudTextField T="string" Label="Chatbox" Variant="Variant.Outlined" Class="mt-n2 mx-4" @bind-Value="_enteredMessage" Immediate="true" @onkeydown="OnEnterKeyPress" TextUpdateSuppression="false" DisableUnderLine="true" />
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendMessage">Send</MudButton>
        </div>

    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private HubConnection _hubConnection { get; set; }
    private List<ChatMessage> _messages = new();
    //TODO casecade it as a parameter
    private User _userSettings = new();
    private List<string> _onlineActivity = new();
    private List<string> _onlineUsers = new();
    private string _enteredMessage { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeAsync<string>("ScrollToBottom", "scrollableDiv");
    }

    protected override async Task OnInitializedAsync()
    {
        var authSate = await AuthenticationStateTask;
        _userSettings = authSate.GetAuthenticatedUser();
        //OnlineUsersService.OnChange += HandleCircuitsChanged;
        //Establish hub connection
        _hubConnection = _hubConnection.TryInitialize(NavigationManager, CustomAuthStateProvider);
        //TODO : Strongly type client?
        _hubConnection.On<string, ChatMessage>(HubHandler.ReceivedMessage, async (from, chatMessage) =>
        {
            _messages.Add(chatMessage);
            await JsRuntime.InvokeAsync<string>("ScrollToBottom", "scrollableDiv");
            _enteredMessage = string.Empty;
            StateHasChanged();
        });

        _hubConnection.On<string>(HubHandler.UserOnline, (user) =>
        {
            Snackbar.Add($"{user} has entered the chat", Severity.Success);
            StateHasChanged();
        });

        _hubConnection.On<string>(HubHandler.UserOffline, (user) =>
       {
           Snackbar.Add($"{user} has left the chat", Severity.Warning);
           StateHasChanged();
       });

        //Lessons learned kick start your hub connecion after you defined your handlers.
        if (_hubConnection.State == HubConnectionState.Disconnected)
        {
            await _hubConnection.StartAsync();
        }
    }
    private void ClearText()
    {
        _enteredMessage = string.Empty;
    }

    private async Task OnEnterKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        var chatMessage = new ChatMessage
            {
                User = _userSettings,
                Message = _enteredMessage
            };
        await _hubConnection.SendAsync(HubHandler.ReceivedMessage, _userSettings.Email, chatMessage);

    }

    public bool IsMyMessage(string email)
    {
        if (_userSettings == null)
            return false;
        return email.ToLower().Equals(_userSettings.Email.ToLower());
    }

    public void Dispose()
    {
        _ = _hubConnection?.DisposeAsync();
    }
}
