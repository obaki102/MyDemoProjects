@page "/chatroom"
@using System.Text.Json
@using MyDemoProjects.Application.Infastructure.Hubs.Interface
@using MyDemoProjects.Application.Shared.Events
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inject IConfiguration ConfigurationManager
@inject CustomAuthStateProvider CustomAuthStateProvider
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@inject HttpClient HttpClient
@inject IHubClient ChatHubClient
<AuthorizeView>
    <Authorized>
        <div id="scrollableDiv" style="height:800px;overflow: auto;">
            <div Class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
                @foreach (var message in _messages)
                {
                    @if (IsMyMessage(message.User.NameIdentifier))
                    {
                        <div class="d-flex justify-end flex-row flex-grow-1 gap-4">
                            <MudPaper Class="pa-4 mr-16 overflow-auto mud-theme-primary">
                                <div class="d-flex flex-row">
                                    <MudChip Variant="Variant.Text" Size="Size.Small">@message.MessageCreateDate</MudChip>
                                </div>
                                <MudText Typo="Typo.body1">@message.Message</MudText>
                            </MudPaper>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-start flex-row flex-grow-1 gap-4">
                            @*TODO: Implement a service where profile pic wil be fetch
                    @if (string.IsNullOrEmpty(message.User.ProfileUrl))
                    {
                    <MudAvatar Color="Color.Secondary">@message.User.Initials</MudAvatar>
                    }
                    else
                    {
                    <MudAvatar Image="@message.User.ProfileUrl" Style="height:50px; width:50px;"> </MudAvatar>
                    }*@

                            <MudAvatar Color="Color.Secondary">@message.User.Initials</MudAvatar>
                            <MudPaper Class="pa-4 mr-16 overflow-auto">
                                <div class="d-flex flex-row">
                                    <MudChip Size="Size.Small" Color="Color.Dark">@message.User.Name</MudChip>
                                    <MudChip Variant="Variant.Text" Size="Size.Small">@message.MessageCreateDate</MudChip>
                                </div>
                                <MudText Typo="Typo.body1">@message.Message</MudText>
                            </MudPaper>
                        </div>
                    }
                }
            </div>
        </div>
        <br />
        <div Class="d-flex  flex-row px-2 mx-4">
            <MudTextField T="string" Label="Chatbox" Variant="Variant.Outlined" Class="mt-n2 mx-4" @bind-Value="_enteredMessage" @onkeyup="OnEnterKeyPress" TextUpdateSuppression="false" DisableUnderLine="true" />
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendMessage">Send</MudButton>
        </div>
        <audio id="audio-player">
            <source id="playerSource" src="" />
        </audio>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private List<ChatMessage> _messages = new();
    private ChatMessage chatMessage = new();

    //TODO casecade it as a parameter
    private User _user = new();
    private string _enteredMessage { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var authSate = await AuthenticationStateTask;
        _user = authSate.GetAuthenticatedUser();
        ChatHubClient.ReceivedMessageHandler += ReceivedChatMessage;
        await ChatHubClient.ConnectAsync();

    }
    private void ClearText()
    {
        _enteredMessage = string.Empty;
    }

    private async void ReceivedChatMessage(object? sender, ChatMessageEventArgs e)
    {
        _messages.Add(e.ChatMessage);
        if (!IsMyMessage(e.ChatMessage.User.NameIdentifier))
        {
            await JsRuntime.InvokeVoidAsync("PlayAudioFile", "/sounds/message-notification.wav");
        }
        _enteredMessage = string.Empty;
        StateHasChanged();

    }

    private async Task OnEnterKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        var chatMessage = new ChatMessage
            {
                User = _user,
                Message = _enteredMessage
            };
        await HttpClient.PostAsJsonAsync(ConfigurationManager.GetSection(AppSecrets.HttpPost.AzureFunctionsMessages).Value, chatMessage);
    }

    public bool IsMyMessage(string nameIdentifier)
    {
        if (_user == null)
            return false;
        return nameIdentifier.ToLower().Equals(_user.NameIdentifier.ToLower());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeAsync<string>("ScrollToBottom", "scrollableDiv");
    }

    public async ValueTask DisposeAsync()
    {
        await ChatHubClient.DisconnectAsync();
        ChatHubClient.ReceivedMessageHandler -= ReceivedChatMessage;
        HttpClient.Dispose();
    }
}
