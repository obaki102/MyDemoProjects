@page "/chatroom"
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject CustomAuthStateProvider CustomAuthStateProvider
@inject IJSRuntime JsRuntime
@implements IDisposable
@inject HttpClient HttpClient
<AuthorizeView>
    <Authorized>
        <div id="scrollableDiv" style="height:800px;overflow: auto;">
            <div Class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
                @foreach (var message in _messages)
                {
                    @if (IsMyMessage(message.User.NameIdentifier))
                    {
                        <div class="d-flex justify-end flex-row flex-grow-1 gap-4">
                            <MudPaper Class="pa-4 mr-16 overflow-auto mud-theme-primary">
                                <div class="d-flex flex-row">
                                    <MudChip Variant="Variant.Text" Size="Size.Small">@message.MessageCreateDate</MudChip>
                                </div>
                                <MudText Typo="Typo.body1">@message.Message</MudText>
                            </MudPaper>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-start flex-row flex-grow-1 gap-4">
                           @*TODO: Implement a service where profile pic wil be fetch 
                               @if (string.IsNullOrEmpty(message.User.ProfileUrl))
                            {
                                <MudAvatar Color="Color.Secondary">@message.User.Initials</MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Image="@message.User.ProfileUrl" Style="height:50px; width:50px;"> </MudAvatar>
                            }*@

                            <MudAvatar Color="Color.Secondary">@message.User.Initials</MudAvatar>
                            <MudPaper Class="pa-4 mr-16 overflow-auto">
                                <div class="d-flex flex-row">
                                    <MudChip Size="Size.Small" Color="Color.Dark">@message.User.Name</MudChip>
                                    <MudChip Variant="Variant.Text"  Size="Size.Small">@message.MessageCreateDate</MudChip>
                                </div>
                                <MudText Typo="Typo.body1">@message.Message</MudText>
                            </MudPaper>
                        </div>
                    }
                }
            </div>
        </div>
        <br />
        <div Class="d-flex  flex-row px-2 mx-4">
             <MudTextField T="string" Label="Chatbox" Variant="Variant.Outlined" Class="mt-n2 mx-4" @bind-Value="_enteredMessage"  @onkeyup="OnEnterKeyPress" TextUpdateSuppression="false" DisableUnderLine="true" />
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendMessage">Send</MudButton>
        </div>
        <audio id="audio-player">
            <source id="playerSource" src="" />
        </audio>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private HubConnection _hubConnection { get; set; }
    private List<ChatMessage> _messages = new();
    //TODO casecade it as a parameter
    private User _user = new();
    private string _enteredMessage { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var authSate = await AuthenticationStateTask;
        _user = authSate.GetAuthenticatedUser();
        //OnlineUsersService.OnChange += HandleCircuitsChanged;
        //Establish hub connection
        _hubConnection = _hubConnection.TryInitialize(NavigationManager, CustomAuthStateProvider, true);
        //TODO : Strongly type client?
        _hubConnection.On<object>(HubHandler.ReceivedMessage, async (chatMessage) =>
        {
           // var json = (JsonElement)chatMessage;
           // var test = JsonSerializer.Deserialize<ChatMessage>(json.GetRawText());
           // Console.WriteLine(chatMessage.Message);
          //  _messages.Add(test);
            //_enteredMessage = string.Empty;
            ////Receive audio notification from messages other than me(current user).
            //if (!IsMyMessage(chatMessage.User.NameIdentifier)){
            //    await JsRuntime.InvokeVoidAsync("PlayAudioFile", "/sounds/message-notification.wav");
            //}

            StateHasChanged();
        });

        // _hubConnection.On<string>(HubHandler.UserOnline, (user) =>
        // {
        //     Snackbar.Add($"{user} has entered the chat", Severity.Success);
        //     StateHasChanged();
        // });

        // _hubConnection.On<string>(HubHandler.UserOffline, (user) =>
        //{
        //    Snackbar.Add($"{user} has left the chat", Severity.Warning);
        //    StateHasChanged();
       //});

        //Lessons learned kick start your hub connecion after you defined your handlers.
        if (_hubConnection.State == HubConnectionState.Disconnected)
        {
            await _hubConnection.StartAsync();
        }
    }
    private void ClearText()
    {
        _enteredMessage = string.Empty;
    }

    private async Task OnEnterKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        var chatMessage = new ChatMessage
            {
                User = _user,
                Message = _enteredMessage
            };
        //await _hubConnection.SendAsync(HubHandler.ReceivedMessage, chatMessage);
        await HttpClient.PostAsJsonAsync("https://mydemoprojectsfunction.azurewebsites.net/api/messages?code=mKDB3ubiBfiwtJ0xnYD7VqX__VRopWheo2IY9wLkcdMWAzFu8E0wvQ==", chatMessage);

    }

    public bool IsMyMessage(string nameIdentifier)
    {
        if (_user == null)
            return false;
        return nameIdentifier.ToLower().Equals(_user.NameIdentifier.ToLower());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await JsRuntime.InvokeAsync<string>("ScrollToBottom", "scrollableDiv");
    }

    public void Dispose()
    {
        _ = _hubConnection?.DisposeAsync();
        HttpClient.Dispose();
    }
}
