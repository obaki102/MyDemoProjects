@page "/chatroom"
@inject IChatRoom ChatRoomService
@implements IDisposable

<h3>ChatRoom</h3>

@if (ChatRoomService.Messages == null)
{
    <MudOverlay Visible="@true" DarkBackground="true" ZIndex="9999" AutoClose="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
    </MudOverlay>
}

else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@StartConnection">Start</MudButton>

    @foreach (var message in ChatRoomService.Messages)
    {


        <MudText Typo="Typo.body2">@message.Message</MudText>
    }

    <MudTextField Label="Enter Message"  @bind-Value="message"  />

    <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@SendMessage">Send Message</MudButton>
}

@code {
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ChatRoomService.InitiateConnection();
        ChatRoomService.BroadcastChanged += StateHasChanged;
    }

    public  async Task StartConnection()
    {
        // await ChatRoomService.InitiateConnection();
        //StateHasChanged();
    }

    public async Task SendMessage()
    {
        await ChatRoomService.SendAsync(message);
        StateHasChanged();
    }


    public void Dispose()
    {
        ChatRoomService.BroadcastChanged -= StateHasChanged;
    }
}
